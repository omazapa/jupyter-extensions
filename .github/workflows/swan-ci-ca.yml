# This workflows will upload a Python Package using Twine when a release is created
# Also a package for node is created and uploaded
# author: Omar.Zapata@cern.ch 2020

name: SWAN CI/CD pipeline

on:
  push:
    tags:
       - '*/v*'
  
jobs:
  build-publish:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set environnment package name  and version
      run: |
        echo ::set-env name=PACKAGE_TAG::${GITHUB_REF#refs/*/}
        echo ::set-env name=PACKAGE_NAME::$(echo  ${GITHUB_REF#refs/*/} | cut -d / -f 1)
        echo ::set-env name=PACKAGE_VERSION::$(echo  ${GITHUB_REF#refs/*/} | cut -d / -f 2)
        cd ${{env.PACKAGE_NAME}}
        if test -f 'package.json'; then 
          echo ::set-env name=PACKAGE_JSON::$(echo 1)
        fi 
        if [ "${{env.PACKAGE_NAME}}" == "SparkMonitor" ]; then 
          echo ::set-env name=PACKAGE_JAVA::$(echo 1)
        fi
    - name: Install Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Install node
      if: ${{env.PACKAGE_JSON}}
      uses: actions/setup-node@v1
      with:
        always-auth: true
        node-version: '12.x'
        registry-url: https://registry.npmjs.org
   
    - name: Set up JDK 1.8
      if: ${{env.PACKAGE_JAVA}}
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Install dependencies 
      run: |
        cd $PACKAGE_NAME
        #pip install setuptools wheel twine jupyter_packaging jupyterlab~=2.0

    - name: Build wheel
      run: |
        cd $PACKAGE_NAME
        #python setup.py sdist bdist_wheel

    - name: Publish distribution to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        cd $PACKAGE_NAME
        #twine upload --repository testpypi dist/*

    - name: Publish distribution to NPM
      if: ${{env.PACKAGE_JSON}}
      run: |
        cd $PACKAGE_NAME
        NPM_PKG_NAME=$(echo $PACKAGE_NAME | tr "[:upper:]" "[:lower:]")
        NPM_PKG_VERSION=$(echo $PACKAGE_VERSION | sed -e 's/v//g')
        NPM_PKG_PATH=build/lib/$NPM_PKG_NAME/labextension/swan_test-$NPM_PKG_NAME-$NPM_PKG_VERSION.tgz
        echo $NPM_PKG_PATH
        #npm publish $NPM_PKG_PATH --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ github.ref }}
#        body: |
#          ${{github.event.head_commit.message}}
#        draft: false
#        prerelease: false

#    - name: Invoke workflow in systemuser-image
#      uses: benc-uk/workflow-dispatch@v1
#      with:
#        workflow: SWAN CI/CD pipeline
#        repo: omazapa/systemuser-image
#        ref: master
#        token: ${{ secrets.PERSONAL_TOKEN }}
#        inputs: '{ "package_name": "${{env.PACKAGE_NAME}}", "package_version": "${{env.PACKAGE_VERSION}}" }'

